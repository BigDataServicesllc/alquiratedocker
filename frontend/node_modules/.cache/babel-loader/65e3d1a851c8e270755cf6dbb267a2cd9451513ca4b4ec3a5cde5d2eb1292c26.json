{"ast":null,"code":"import React,{useState}from'react';import LayoutHeader from'./components/LayoutHeader';import LayoutFooter from'./components/LayoutFooter';import HomePage from'./components/HomePage';// Quitamos la importación de ListingsPage\n// import ListingsPage from './components/ListingsPage';\nimport RankingsPage from'./components/RankingsPage';import AddReviewPage from'./components/AddReviewPage';// No necesitamos mock data ni otros componentes por ahora\n// import PropertyDetailPage from './components/PropertyDetailPage';\n// import RegisterPage from './components/RegisterPage';\n// import LoginPage from './components/LoginPage';\n// import ForgotPasswordPage from './components/ForgotPasswordPage';\n// import ProfilePage from './components/ProfilePage';\n// import MyReviewsPage from './components/MyReviewsPage';\n// import FavoritesPage from './components/FavoritesPage';\n// import { currentUser } from './mock/users'; \n// import { reviews as initialReviewsData } from './mock/reviews'; \nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[currentPage,setCurrentPage]=useState('home');// No necesitamos selectedPropertyId, isLoggedIn, registeredUsers, userReviews por ahora\n// const [selectedPropertyId, setSelectedPropertyId] = useState(1);\n// const [isLoggedIn, setIsLoggedIn] = useState(false);\n// const [registeredUsers, setRegisteredUsers] = useState([]); \n// const [userReviews, setUserReviews] = useState([]); \n// Quitamos las funciones de manejo de login, registro y reseñas por ahora\n// const handlePropertySelect = (propertyId) => { ... }\n// const handleLogin = (email, password) => { ... }\n// const handleLogout = () => { ... }\n// const handleRegister = (userData) => { ... }\n// const handleAddReview = (reviewData) => { ... }\nconst renderPage=()=>{switch(currentPage){case'home':return/*#__PURE__*/_jsx(HomePage,{setCurrentPage:setCurrentPage});// Quitamos el caso para ListingsPage\n// case 'listings': return <ListingsPage setCurrentPage={setCurrentPage} onSelectProperty={handlePropertySelect} />;\ncase'rankings':return/*#__PURE__*/_jsx(RankingsPage,{});// No necesita props por ahora\ncase'addReview':// Pasamos una función placeholder para onAddReview\nreturn/*#__PURE__*/_jsx(AddReviewPage,{onAddReview:data=>console.log('Review data:',data)});// Quitamos los otros casos por ahora\n// case 'search': return <ListingsPage setCurrentPage={setCurrentPage} onSelectProperty={handlePropertySelect} />;\n// case 'propertyDetail': return <PropertyDetailPage propertyId={selectedPropertyId} setCurrentPage={setCurrentPage} />;\n// case 'register': return <RegisterPage setCurrentPage={setCurrentPage} onRegister={handleRegister} />;\n// case 'login': return <LoginPage setCurrentPage={setCurrentPage} onLogin={handleLogin} />;\n// case 'forgotPassword': return <ForgotPasswordPage setCurrentPage={setCurrentPage} />;\n// case 'registrationSuccess': return ( ... );\n// case 'reviewSubmitted': return <AddReviewPage initialStep={4} calculatedRating={...} />;\n// case 'profile': return <ProfilePage setCurrentPage={setCurrentPage} />;\n// case 'myReviews': return <MyReviewsPage setCurrentPage={setCurrentPage} userReviews={userReviews} />; \n// case 'favorites': return <FavoritesPage setCurrentPage={setCurrentPage} />;\ndefault:return/*#__PURE__*/_jsx(HomePage,{setCurrentPage:setCurrentPage});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col min-h-screen bg-gray-100\",children:[/*#__PURE__*/_jsx(LayoutHeader,{currentPage:currentPage,setCurrentPage:setCurrentPage,isLoggedIn:false// Temporalmente false\n,onLogout:()=>{}// Temporalmente placeholder\n}),/*#__PURE__*/_jsx(\"main\",{className:\"flex-grow\",children:renderPage()}),/*#__PURE__*/_jsx(LayoutFooter,{})]});};export default App;","map":{"version":3,"names":["React","useState","LayoutHeader","LayoutFooter","HomePage","RankingsPage","AddReviewPage","jsx","_jsx","jsxs","_jsxs","App","currentPage","setCurrentPage","renderPage","onAddReview","data","console","log","className","children","isLoggedIn","onLogout"],"sources":["/Users/michaelortiz/Documents/alquiratedocker/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport LayoutHeader from './components/LayoutHeader';\nimport LayoutFooter from './components/LayoutFooter';\nimport HomePage from './components/HomePage';\n// Quitamos la importación de ListingsPage\n// import ListingsPage from './components/ListingsPage';\nimport RankingsPage from './components/RankingsPage';\nimport AddReviewPage from './components/AddReviewPage';\n\n// No necesitamos mock data ni otros componentes por ahora\n// import PropertyDetailPage from './components/PropertyDetailPage';\n// import RegisterPage from './components/RegisterPage';\n// import LoginPage from './components/LoginPage';\n// import ForgotPasswordPage from './components/ForgotPasswordPage';\n// import ProfilePage from './components/ProfilePage';\n// import MyReviewsPage from './components/MyReviewsPage';\n// import FavoritesPage from './components/FavoritesPage';\n// import { currentUser } from './mock/users'; \n// import { reviews as initialReviewsData } from './mock/reviews'; \n\nconst App = () => {\n  const [currentPage, setCurrentPage] = useState('home');\n  // No necesitamos selectedPropertyId, isLoggedIn, registeredUsers, userReviews por ahora\n  // const [selectedPropertyId, setSelectedPropertyId] = useState(1);\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const [registeredUsers, setRegisteredUsers] = useState([]); \n  // const [userReviews, setUserReviews] = useState([]); \n\n\n  // Quitamos las funciones de manejo de login, registro y reseñas por ahora\n  // const handlePropertySelect = (propertyId) => { ... }\n  // const handleLogin = (email, password) => { ... }\n  // const handleLogout = () => { ... }\n  // const handleRegister = (userData) => { ... }\n  // const handleAddReview = (reviewData) => { ... }\n\n\n  const renderPage = () => {\n    switch (currentPage) {\n      case 'home':\n        return <HomePage setCurrentPage={setCurrentPage} />;\n      // Quitamos el caso para ListingsPage\n      // case 'listings': return <ListingsPage setCurrentPage={setCurrentPage} onSelectProperty={handlePropertySelect} />;\n      case 'rankings': \n        return <RankingsPage />; // No necesita props por ahora\n      case 'addReview':\n        // Pasamos una función placeholder para onAddReview\n        return <AddReviewPage onAddReview={(data) => console.log('Review data:', data)} />; \n      // Quitamos los otros casos por ahora\n      // case 'search': return <ListingsPage setCurrentPage={setCurrentPage} onSelectProperty={handlePropertySelect} />;\n      // case 'propertyDetail': return <PropertyDetailPage propertyId={selectedPropertyId} setCurrentPage={setCurrentPage} />;\n      // case 'register': return <RegisterPage setCurrentPage={setCurrentPage} onRegister={handleRegister} />;\n      // case 'login': return <LoginPage setCurrentPage={setCurrentPage} onLogin={handleLogin} />;\n      // case 'forgotPassword': return <ForgotPasswordPage setCurrentPage={setCurrentPage} />;\n      // case 'registrationSuccess': return ( ... );\n      // case 'reviewSubmitted': return <AddReviewPage initialStep={4} calculatedRating={...} />;\n      // case 'profile': return <ProfilePage setCurrentPage={setCurrentPage} />;\n      // case 'myReviews': return <MyReviewsPage setCurrentPage={setCurrentPage} userReviews={userReviews} />; \n      // case 'favorites': return <FavoritesPage setCurrentPage={setCurrentPage} />;\n      default:\n        return <HomePage setCurrentPage={setCurrentPage} />;\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-gray-100\">\n      {/* Pasamos setCurrentPage al Header */}\n      <LayoutHeader \n        currentPage={currentPage} \n        setCurrentPage={setCurrentPage} \n        isLoggedIn={false} // Temporalmente false\n        onLogout={() => {}} // Temporalmente placeholder\n      />\n      <main className=\"flex-grow\">\n        {renderPage()}\n      </main>\n      <LayoutFooter />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CACpD,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CACpD,MAAO,CAAAC,QAAQ,KAAM,uBAAuB,CAC5C;AACA;AACA,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CACpD,MAAO,CAAAC,aAAa,KAAM,4BAA4B,CAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEA,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGZ,QAAQ,CAAC,MAAM,CAAC,CACtD;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA,KAAM,CAAAa,UAAU,CAAGA,CAAA,GAAM,CACvB,OAAQF,WAAW,EACjB,IAAK,MAAM,CACT,mBAAOJ,IAAA,CAACJ,QAAQ,EAACS,cAAc,CAAEA,cAAe,CAAE,CAAC,CACrD;AACA;AACA,IAAK,UAAU,CACb,mBAAOL,IAAA,CAACH,YAAY,GAAE,CAAC,CAAE;AAC3B,IAAK,WAAW,CACd;AACA,mBAAOG,IAAA,CAACF,aAAa,EAACS,WAAW,CAAGC,IAAI,EAAKC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEF,IAAI,CAAE,CAAE,CAAC,CACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QACE,mBAAOR,IAAA,CAACJ,QAAQ,EAACS,cAAc,CAAEA,cAAe,CAAE,CAAC,CACvD,CACF,CAAC,CAED,mBACEH,KAAA,QAAKS,SAAS,CAAC,wCAAwC,CAAAC,QAAA,eAErDZ,IAAA,CAACN,YAAY,EACXU,WAAW,CAAEA,WAAY,CACzBC,cAAc,CAAEA,cAAe,CAC/BQ,UAAU,CAAE,KAAO;AAAA,CACnBC,QAAQ,CAAEA,CAAA,GAAM,CAAC,CAAG;AAAA,CACrB,CAAC,cACFd,IAAA,SAAMW,SAAS,CAAC,WAAW,CAAAC,QAAA,CACxBN,UAAU,CAAC,CAAC,CACT,CAAC,cACPN,IAAA,CAACL,YAAY,GAAE,CAAC,EACb,CAAC,CAEV,CAAC,CAED,cAAe,CAAAQ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}